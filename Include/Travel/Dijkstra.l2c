
CLASS TRAVEL_DIJKSTRA NULL

   /***************************\
   \***************************/

	VAR_START

	VAR_END

   /***************************\
   \***************************/

	PUBLIC CONSTRUCT 0

	RETURN VOID

   /***************************\
   \***************************/

	PUBLIC GET_COORDINATES 1 DIJKDATA

		DEFINE SORTEDLIST COORDINATES 0
		DEFINE ARRAYLIST COORDINATEDATA 0
		FOREACH I ARRAYLIST DIJKDATA

			ENGINEX.STRINGS.EXPLODE COORDINATEDATA 2 "#$|" "#$<&DIJKDATA.GET_KEY I&>"
			DEFINE VECTOR3 COORDINATE 0
			COORDINATE.X = "#i<&COORDINATEDATA.0&>"
			COORDINATE.Y = "#i<&COORDINATEDATA.1&>"
			COORDINATE.Z = "#i<&COORDINATEDATA.2&>"
			COORDINATES.ADD COORDINATE "<&DIJKDATA.GET_KEY I&>"
			DELETE COORDINATE

		NEXTEACH

	RETURN COORDINATES

   /***************************\
   \***************************/

	PUBLIC SHORTEST_PATH 4 FROM_POINT TO_POINT DIJKDATA DIJKDATA_COORDINATES
		DEFINE ARRAYLIST PATH 0

		IF ("DIJKDATA.CONTAINS_KEY <&FROM_POINT&>" == FALSE)
			PRINT_TEXT "Travel-Dijkstra :: Cant calculate - start point wasnt found in DijkData"
			RETURN PATH
		ENDIF
		IF ("DIJKDATA.CONTAINS_KEY <&TO_POINT&>" == FALSE)
			PRINT_TEXT "Travel-Dijkstra :: Cant calculate - final point wasnt found in DijkData"
			RETURN PATH
		ENDIF

		DEFINE SORTEDLIST COORDINATES 0
		IF (DIJKDATA_COORDINATES.TYPE == SORTEDLIST)
			COORDINATES = DIJKDATA_COORDINATES
		ELSE
			TRAVEL.DIJKSTRA.GET_COORDINATES COORDINATES 1 DIJKDATA
		ENDIF

		DEFINE ARRAYLIST CURRENT_POINTS 0
		CURRENT_POINTS.ADD "#$<&FROM_POINT&>"
		DEFINE SORTEDLIST VISITED_POINTS 0
		VISITED_POINTS.ADD #i0 "<&FROM_POINT&>"

		DEFINE DOUBLE _BEST_DISTANCE 0
		DEFINE STRING _BEST_FROM ""
		DEFINE STRING _BEST_TO ""

		DEFINE STRING _CUR_POINT ""
		DEFINE STRING _NEXT_POINT ""
		DEFINE DOUBLE _DISTANCE 0

		DEFINE INT _CUR_USED 0
		DEFINE INT _BEST_FOUND 0

		DEFINE SORTEDLIST PATH_BACKWARDED 0

		WHILE (CURRENT_POINTS.COUNT > ZERO)

			ENGINEX.MATH.MAX_DBL _BEST_DISTANCE 0
			_BEST_FOUND = FALSE

			FOREACH CURRENT_POINT_I STRING CURRENT_POINTS
				_CUR_POINT = "#$<&CURRENT_POINTS.CURRENT_POINT_I&>"

				_CUR_USED = FALSE

				FOREACH NEXT_POINT_I STRING DIJKDATA._CUR_POINT
					_NEXT_POINT = "#$<&DIJKDATA._CUR_POINT.NEXT_POINT_I&>"

					IF ("DIJKDATA.CONTAINS_KEY <&_NEXT_POINT&>" == TRUE)

						IF ("VISITED_POINTS.CONTAINS_KEY <&_NEXT_POINT&>" == FALSE)

							DISTANCE _DISTANCE COORDINATES._CUR_POINT.X COORDINATES._CUR_POINT.Y COORDINATES._CUR_POINT.Z COORDINATES._NEXT_POINT.X COORDINATES._NEXT_POINT.Y COORDINATES._NEXT_POINT.Z
							_DISTANCE = _DISTANCE + "#i<&VISITED_POINTS._CUR_POINT&>"

							IF (_DISTANCE < _BEST_DISTANCE)
								_BEST_DISTANCE = _DISTANCE
								_BEST_FROM = _CUR_POINT
								_BEST_TO = _NEXT_POINT
							ENDIF
							_CUR_USED = TRUE
							_BEST_FOUND = TRUE

						ENDIF
					ENDIF
				NEXTEACH

				IF (_CUR_USED == FALSE)
					CURRENT_POINTS.REMOVE "<&CURRENT_POINT_I&>"
				ENDIF

			NEXTEACH

			IF (_BEST_FOUND == TRUE)
				PATH_BACKWARDED.ADD "#$<&_BEST_FROM&>" "<&_BEST_TO&>"
				IF (_BEST_TO == TO_POINT)
					CURRENT_POINTS.CLEAR
					VISITED_POINTS.CLEAR
				ELSE
					CURRENT_POINTS.ADD "#$<&_BEST_TO&>"
					VISITED_POINTS.ADD "#i<&_BEST_DISTANCE&>" "<&_BEST_TO&>"
				ENDIF
			ENDIF
		WEND

		IF ("PATH_BACKWARDED.CONTAINS_KEY <&TO_POINT&>" == TRUE)
			DEFINE STRING BACKWARDED_POINT "<&TO_POINT&>"
			PATH.ADD "#$<&BACKWARDED_POINT&>"
			WHILE (BACKWARDED_POINT != FROM_POINT)
				BACKWARDED_POINT = "#$<&PATH_BACKWARDED.BACKWARDED_POINT&>"
				PATH.ADD "#$<&BACKWARDED_POINT&>"
			WEND
			PATH.REVERSE
		ENDIF

	RETURN PATH

   /***************************\
   \***************************/

END_CLASS


INCLUDE Include/EngineX/Time/Timer.l2c
INCLUDE Include/EngineX/Time/Counter.l2c

CLASS ENGINEX_TIME NULL

//-------------------------------------------------------------------------------------

	VAR_START
		PUBLIC SORTEDLIST TIMERS 0
		PUBLIC SORTEDLIST COUNTERS 0
		PUBLIC STRING __COUNTER_ID ""
		PUBLIC INT SECONDS_UNTILL_TIMESTAMP 62135596800
		PUBLIC INT SECONDS_PER_MINUTE 60
		PUBLIC INT SECONDS_PER_HOUR 3600
		PUBLIC INT SECONDS_PER_DAY 86400
		PUBLIC INT SECONDS_PER_WEEK 604800
		PUBLIC DOUBLE DAYS_PER_YEAR_AVERAGE 365.2425
		PUBLIC INT SECONDS_PER_YEAR_AVERAGE 31556952
		PUBLIC INT SECONDS_PER_YEAR_NOLEAP 31536000
		PUBLIC INT SECONDS_PER_YEAR_LEAP 31622400
		PUBLIC SORTEDLIST DAY_NAMES 0
		PUBLIC SORTEDLIST MONTH_NAMES 0
	VAR_END

//-------------------------------------------------------------------------------------

	PUBLIC CONSTRUCT 0
		ENGINEX.TIME.DAY_NAMES.ADD #$Monday "1"
		ENGINEX.TIME.DAY_NAMES.ADD #$Tuesday "2"
		ENGINEX.TIME.DAY_NAMES.ADD #$Wednesday "3"
		ENGINEX.TIME.DAY_NAMES.ADD #$Thursday "4"
		ENGINEX.TIME.DAY_NAMES.ADD #$Friday "5"
		ENGINEX.TIME.DAY_NAMES.ADD #$Saturday "6"
		ENGINEX.TIME.DAY_NAMES.ADD #$Sunday "7"
		ENGINEX.TIME.MONTH_NAMES.ADD #$January "1"
		ENGINEX.TIME.MONTH_NAMES.ADD #$February "2"
		ENGINEX.TIME.MONTH_NAMES.ADD #$March "3"
		ENGINEX.TIME.MONTH_NAMES.ADD #$April "4"
		ENGINEX.TIME.MONTH_NAMES.ADD #$May "5"
		ENGINEX.TIME.MONTH_NAMES.ADD #$June "6"
		ENGINEX.TIME.MONTH_NAMES.ADD #$July "7"
		ENGINEX.TIME.MONTH_NAMES.ADD #$August "8"
		ENGINEX.TIME.MONTH_NAMES.ADD #$September "9"
		ENGINEX.TIME.MONTH_NAMES.ADD #$October "10"
		ENGINEX.TIME.MONTH_NAMES.ADD #$November "11"
		ENGINEX.TIME.MONTH_NAMES.ADD #$December "12"
	RETURN VOID

//-------------------------------------------------------------------------------------

	PUBLIC TIMER_CREATE 1 TIMER_ID
		IF ("ENGINEX.TIME.TIMERS.CONTAINS_KEY <&TIMER_ID&>" == FALSE)
			DEFINE ENGINEX_TIME_TIMER TIMER 0
			ENGINEX.TIME.TIMERS.ADD TIMER "<&TIMER_ID&>"
		ELSE
			PRINT_TEXT " EngineX-Time ]: Timer '<&TIMER_ID&>' already exists"
		ENDIF
	RETURN VOID

//-------------------------------------------------------------------------------------

	PUBLIC TIMER_START 1 TIMER_ID
		IF ("ENGINEX.TIME.TIMERS.CONTAINS_KEY <&TIMER_ID&>" == TRUE)
			GET_TIME ENGINEX.TIME.TIMERS.TIMER_ID.TICKS_START
		ELSE
			PRINT_TEXT " EngineX-Time ]: Timer '<&TIMER_ID&>' doesnt exists"
		ENDIF
	RETURN VOID

//-------------------------------------------------------------------------------------

	PUBLIC TIMER_STOP 1 TIMER_ID
		IF ("ENGINEX.TIME.TIMERS.CONTAINS_KEY <&TIMER_ID&>" == TRUE)
			GET_TIME ENGINEX.TIME.TIMERS.TIMER_ID.TICKS_END
		ELSE
			PRINT_TEXT " EngineX-Time ]: Timer '<&TIMER_ID&>' doesnt exists"
		ENDIF
	RETURN VOID

//-------------------------------------------------------------------------------------

	PUBLIC TIMER_UPDATE 1 TIMER_ID
		IF ("ENGINEX.TIME.TIMERS.CONTAINS_KEY <&TIMER_ID&>" == TRUE)
			IF (ENGINEX.TIME.TIMERS.TIMER_ID.TICKS_START != ZERO)
				IF (ENGINEX.TIME.TIMERS.TIMER_ID.TICKS_END != ZERO)
					ENGINEX.TIME.TIMERS.TIMER_ID.TICKS = ENGINEX.TIME.TIMERS.TIMER_ID.TICKS + ENGINEX.TIME.TIMERS.TIMER_ID.TICKS_END
					ENGINEX.TIME.TIMERS.TIMER_ID.TICKS = ENGINEX.TIME.TIMERS.TIMER_ID.TICKS - ENGINEX.TIME.TIMERS.TIMER_ID.TICKS_START
					ENGINEX.TIME.TIMERS.TIMER_ID.TICKS_START = ZERO
					ENGINEX.TIME.TIMERS.TIMER_ID.TICKS_END = ZERO
				ELSE
					PRINT_TEXT " EngineX-Time ]: Timer '<&TIMER_ID&>' wasnt stopped"
				ENDIF
			ELSE
				PRINT_TEXT " EngineX-Time ]: Timer '<&TIMER_ID&>' wasnt started"
			ENDIF
		ELSE
			PRINT_TEXT " EngineX-Time ]: Timer '<&TIMER_ID&>' doesnt exists"
		ENDIF
	RETURN VOID

//-------------------------------------------------------------------------------------

	PUBLIC TIMER_TICKS 1 TIMER_ID
		DEFINE INT TICKS 0
		IF ("ENGINEX.TIME.TIMERS.CONTAINS_KEY <&TIMER_ID&>" == TRUE)
			TICKS = ENGINEX.TIME.TIMERS.TIMER_ID.TICKS
		ELSE
			PRINT_TEXT " EngineX-Time ]: Timer '<&TIMER_ID&>' doesnt exist"
		ENDIF
	RETURN TICKS

//-------------------------------------------------------------------------------------

	PUBLIC TIMER_RESET 1 TIMER_ID
		IF ("ENGINEX.TIME.TIMERS.CONTAINS_KEY <&TIMER_ID&>" == TRUE)
			ENGINEX.TIME.TIMERS.TIMER_ID.TICKS = ZERO
		ELSE
			PRINT_TEXT " EngineX-Time ]: Timer '<&TIMER_ID&>' doesnt exist"
		ENDIF
	RETURN VOID

//-------------------------------------------------------------------------------------

	PUBLIC COUNTER_CREATE 3 COUNTER_ID INTERVAL_SLEEPTIME VALUE_PER_INTERVAL
		IF ("ENGINEX.TIME.COUNTERS.CONTAINS_KEY <&COUNTER_ID&>" == FALSE)
			DEFINE ENGINEX_TIME_COUNTER COUNTER 0
			ENGINEX.TIME.COUNTERS.ADD COUNTER "<&COUNTER_ID&>"
			ENGINEX.TIME.COUNTERS.COUNTER_ID.INTERVAL_SLEEPTIME = "#i<&INTERVAL_SLEEPTIME&>"
			ENGINEX.TIME.COUNTERS.COUNTER_ID.VALUE_PER_INTERVAL = "#d<&VALUE_PER_INTERVAL&>"
		ELSE
			PRINT_TEXT " EngineX-Time ]: Counter '<&COUNTER_ID&>' already exists"
		ENDIF
	RETURN VOID

//-------------------------------------------------------------------------------------

	PUBLIC COUNTER_START 1 COUNTER_ID
		IF ("ENGINEX.TIME.COUNTERS.CONTAINS_KEY <&COUNTER_ID&>" == TRUE)
			WHILE (ENGINEX.TIME.__COUNTER_ID != "#$")
				SLEEP 10
			WEND
			ENGINEX.TIME.__COUNTER_ID = "#$<&COUNTER_ID&>"

			ENGINEX.TIME.COUNTERS.COUNTER_ID.STOP = FALSE
			THREAD __COUNTER_START_THREAD
		ELSE
			PRINT_TEXT " EngineX-Time ]: Counter '<&COUNTER_ID&>' doesnt exists"
		ENDIF
	RETURN VOID

//-------------------------------------------------------------------------------------

	PUBLIC __COUNTER_START_THREAD 0
		DEFINE STRING COUNTER_ID "<&ENGINEX.TIME.__COUNTER_ID&>"
		ENGINEX.TIME.__COUNTER_ID = "#$"
		DEFINE INT INTERVAL_SLEEPTIME "<&ENGINEX.TIME.COUNTERS.COUNTER_ID.INTERVAL_SLEEPTIME&>"
		DEFINE DOUBLE VALUE_PER_INTERVAL "<&ENGINEX.TIME.COUNTERS.COUNTER_ID.VALUE_PER_INTERVAL&>"
		WHILE (ENGINEX.TIME.COUNTERS.COUNTER_ID.STOP == FALSE)
			ENGINEX.TIME.COUNTERS.COUNTER_ID.VALUE = ENGINEX.TIME.COUNTERS.COUNTER_ID.VALUE + "#d<&VALUE_PER_INTERVAL&>"
			SLEEP "<&INTERVAL_SLEEPTIME&>"
		WEND
		ENGINEX.TIME.COUNTERS.COUNTER_ID.STOP = FALSE
	RETURN VOID

//-------------------------------------------------------------------------------------

	PUBLIC COUNTER_STOP 1 COUNTER_ID
		IF ("ENGINEX.TIME.COUNTERS.CONTAINS_KEY <&COUNTER_ID&>" == TRUE)
			ENGINEX.TIME.COUNTERS.COUNTER_ID.STOP = TRUE
		ELSE
			PRINT_TEXT " EngineX-Time ]: Counter '<&COUNTER_ID&>' doesnt exists"
		ENDIF
	RETURN VOID

//-------------------------------------------------------------------------------------

	PUBLIC COUNTER_VALUE 1 COUNTER_ID
		DEFINE DOUBLE VALUE 0
		IF ("ENGINEX.TIME.COUNTERS.CONTAINS_KEY <&COUNTER_ID&>" == TRUE)
			VALUE = "#d<&ENGINEX.TIME.COUNTERS.COUNTER_ID.VALUE&>"
		ELSE
			PRINT_TEXT " EngineX-Time ]: Counter '<&COUNTER_ID&>' doesnt exist"
		ENDIF
	RETURN VALUE

//-------------------------------------------------------------------------------------

	PUBLIC COUNTER_RESET 1 COUNTER_ID
		IF ("ENGINEX.TIME.COUNTERS.CONTAINS_KEY <&COUNTER_ID&>" == TRUE)
			ENGINEX.TIME.COUNTERS.COUNTER_ID.VALUE = ZERO
		ELSE
			PRINT_TEXT " EngineX-Time ]: Counter '<&COUNTER_ID&>' doesnt exists"
		ENDIF
	RETURN VOID

//-------------------------------------------------------------------------------------

	PUBLIC GET_DATA 1 TICKS

		DEFINE SORTEDLIST TIMEDATA 0
		TIMEDATA.ADD ZERO "TICKS_SECONDS"
		TIMEDATA.ADD ZERO "TICKS_DAYS"
		TIMEDATA.ADD ZERO "TICKS_WEEKS"
		TIMEDATA.ADD ZERO "TIMESTAMP"
		TIMEDATA.ADD ZERO "MICRO"
		TIMEDATA.ADD ZERO "YEAR"
		TIMEDATA.ADD ZERO "DAY_OF_YEAR"
		TIMEDATA.ADD ZERO "HOUR"
		TIMEDATA.ADD ZERO "MINUTE"
		TIMEDATA.ADD ZERO "SECOND"
		TIMEDATA.ADD ZERO "DAY_OF_WEEK"
		TIMEDATA.ADD "#$" "DAY_NAME"
		TIMEDATA.ADD ZERO "WEEK"
		TIMEDATA.ADD ZERO "IS_LEAP_YEAR"
		TIMEDATA.ADD ZERO "MONTH"
		TIMEDATA.ADD "#$" "MONTH_NAME"
		TIMEDATA.ADD ZERO "DAY"
		TIMEDATA.ADD #$ "DAY_FORMATED"
		TIMEDATA.ADD #$ "MONTH_FORMATED"
		TIMEDATA.ADD #$ "HOUR_FORMATED"
		TIMEDATA.ADD #$ "MINUTE_FORMATED"
		TIMEDATA.ADD #$ "SECOND_FORMATED"
		TIMEDATA.ADD ZERO "IS_SUMMERTIME"
		TIMEDATA.ADD #$ "DATE"
		TIMEDATA.ADD #$ "TIME"


		/*** get start data **/

		TIMEDATA.#$TICKS_SECONDS = TICKS / TICKS_PER_S
		TIMEDATA.#$TICKS_DAYS = TICKS / TICKS_PER_D
		TIMEDATA.#$TICKS_WEEKS = TIMEDATA.#$TICKS_DAYS / #i7
		TIMEDATA.#$TIMESTAMP = TIMEDATA.#$TICKS_SECONDS - ENGINEX.TIME.SECONDS_UNTILL_TIMESTAMP
		TIMEDATA.#$MICRO = TICKS % TICKS_PER_S


		/*** get zero-based year and seconds left of current year**/

		DEFINE INT __SECONDS_TILL_YEAR_STARTED 0
		DEFINE INT __SECONDS_TILL_YEAR_STARTED_ADD 0
		DEFINE INT __SECONDS_SINCE_YEAR_STARTED 0
		DEFINE INT __PERIOD400_SECONDS 0
		DEFINE INT __PERIOD100_SECONDS 0
		DEFINE INT __PERIOD4_SECONDS 0
		DEFINE INT __PERIOD400_COUNT 0
		DEFINE INT __PERIOD400_REST 0
		DEFINE INT __PERIOD100_COUNT 0
		DEFINE INT __PERIOD100_REST 0
		DEFINE INT __PERIOD4_COUNT 0
		DEFINE INT __PERIOD4_REST 0
		DEFINE INT __PERIOD1_COUNT 0
		DEFINE INT __PERIOD1_REST 0
		DEFINE INT __YEAR_ADD 0


		__PERIOD4_SECONDS = #i4 * ENGINEX.TIME.SECONDS_PER_YEAR_NOLEAP
		__PERIOD4_SECONDS = __PERIOD4_SECONDS + ENGINEX.TIME.SECONDS_PER_DAY

		__PERIOD100_SECONDS = __PERIOD4_SECONDS * #i25
		__PERIOD100_SECONDS = __PERIOD100_SECONDS - ENGINEX.TIME.SECONDS_PER_DAY

		__PERIOD400_SECONDS = __PERIOD100_SECONDS * #i4
		__PERIOD400_SECONDS = __PERIOD400_SECONDS + ENGINEX.TIME.SECONDS_PER_DAY


		__PERIOD400_COUNT = TIMEDATA.#$TICKS_SECONDS / __PERIOD400_SECONDS
		__PERIOD400_REST = TIMEDATA.#$TICKS_SECONDS % __PERIOD400_SECONDS

		__PERIOD100_COUNT = __PERIOD400_REST / __PERIOD100_SECONDS
		__PERIOD100_REST = __PERIOD400_REST % __PERIOD100_SECONDS

		__PERIOD4_COUNT = __PERIOD100_REST / __PERIOD4_SECONDS
		__PERIOD4_REST = __PERIOD100_REST % __PERIOD4_SECONDS

		__PERIOD1_COUNT = __PERIOD4_REST / ENGINEX.TIME.SECONDS_PER_YEAR_NOLEAP
		__PERIOD1_REST = __PERIOD4_REST % ENGINEX.TIME.SECONDS_PER_YEAR_NOLEAP


		__YEAR_ADD = __PERIOD400_COUNT * #i400
		TIMEDATA.#$YEAR = TIMEDATA.#$YEAR + __YEAR_ADD

		__YEAR_ADD = __PERIOD100_COUNT * #i100
		TIMEDATA.#$YEAR = TIMEDATA.#$YEAR + __YEAR_ADD

		__YEAR_ADD = __PERIOD4_COUNT * #i4
		TIMEDATA.#$YEAR = TIMEDATA.#$YEAR + __YEAR_ADD

		__YEAR_ADD = __PERIOD1_COUNT * #i1
		TIMEDATA.#$YEAR = TIMEDATA.#$YEAR + __YEAR_ADD


		__SECONDS_SINCE_YEAR_STARTED = "#i<&__PERIOD1_REST&>"


		__SECONDS_TILL_YEAR_STARTED_ADD = __PERIOD400_COUNT * __PERIOD400_SECONDS
		__SECONDS_TILL_YEAR_STARTED = __SECONDS_TILL_YEAR_STARTED + __SECONDS_TILL_YEAR_STARTED_ADD

		__SECONDS_TILL_YEAR_STARTED_ADD = __PERIOD100_COUNT * __PERIOD100_SECONDS
		__SECONDS_TILL_YEAR_STARTED = __SECONDS_TILL_YEAR_STARTED + __SECONDS_TILL_YEAR_STARTED_ADD

		__SECONDS_TILL_YEAR_STARTED_ADD = __PERIOD4_COUNT * __PERIOD4_SECONDS
		__SECONDS_TILL_YEAR_STARTED = __SECONDS_TILL_YEAR_STARTED + __SECONDS_TILL_YEAR_STARTED_ADD

		__SECONDS_TILL_YEAR_STARTED_ADD = __PERIOD1_COUNT * ENGINEX.TIME.SECONDS_PER_YEAR_NOLEAP
		__SECONDS_TILL_YEAR_STARTED = __SECONDS_TILL_YEAR_STARTED + __SECONDS_TILL_YEAR_STARTED_ADD


		DELETE __PERIOD400_SECONDS
		DELETE __PERIOD100_SECONDS
		DELETE __PERIOD4_SECONDS
		DELETE __PERIOD400_COUNT
		DELETE __PERIOD400_REST
		DELETE __PERIOD100_COUNT
		DELETE __PERIOD100_REST
		DELETE __PERIOD4_COUNT
		DELETE __PERIOD4_REST
		DELETE __PERIOD1_COUNT
		DELETE __PERIOD1_REST
		DELETE __YEAR_ADD
		DELETE __SECONDS_TILL_YEAR_STARTED_ADD


		/*** get day of current year **/

		TIMEDATA.#$DAY_OF_YEAR = __SECONDS_SINCE_YEAR_STARTED / ENGINEX.TIME.SECONDS_PER_DAY
		TIMEDATA.#$DAY_OF_YEAR = TIMEDATA.#$DAY_OF_YEAR + #i1


		/*** get week of current year **/

		DEFINE INT __DAYS_TILL_NEWYEAR 0
		DEFINE INT __FIST_DAY_OF_FIRST_WEEK 0
		DEFINE INT __DAY_OF_YEAR_TEMP 0
		DEFINE INT __DAY_OF_YEAR_REST 0

		__DAYS_TILL_NEWYEAR = __SECONDS_TILL_YEAR_STARTED / ENGINEX.TIME.SECONDS_PER_DAY
		__FIST_DAY_OF_FIRST_WEEK = __DAYS_TILL_NEWYEAR % #i7

		// year starts with week 53 and its the first week
		IF (__FIST_DAY_OF_FIRST_WEEK > #i3) AND (TIMEDATA.#$DAY_OF_YEAR < #i4)
			TIMEDATA.#$WEEK = #i53
		ELSE

			// year starts with week 53
			IF (__FIST_DAY_OF_FIRST_WEEK > #i3)
				__DAY_OF_YEAR_TEMP = TIMEDATA.#$DAY_OF_YEAR - #i7
				__DAY_OF_YEAR_TEMP = __DAY_OF_YEAR_TEMP + __FIST_DAY_OF_FIRST_WEEK

			// year starts with week 1
			ELSE
				__DAY_OF_YEAR_TEMP = TIMEDATA.#$DAY_OF_YEAR + __FIST_DAY_OF_FIRST_WEEK
				__DAY_OF_YEAR_TEMP = __DAY_OF_YEAR_TEMP - #i1
			ENDIF
			TIMEDATA.#$WEEK = __DAY_OF_YEAR_TEMP / #i7
			__DAY_OF_YEAR_REST = __DAY_OF_YEAR_TEMP % #i7
			IF (__DAY_OF_YEAR_REST > ZERO)
				TIMEDATA.#$WEEK = TIMEDATA.#$WEEK + #i1
			ENDIF
		ENDIF

		DELETE __DAY_OF_YEAR_TEMP
		DELETE __DAYS_TILL_NEWYEAR
		DELETE __SECONDS_TILL_YEAR_STARTED
		DELETE __DAY_OF_YEAR_REST


		/*** get current day of week **/

		TIMEDATA.#$DAY_OF_WEEK = TIMEDATA.#$TICKS_DAYS % #i7
		TIMEDATA.#$DAY_OF_WEEK = TIMEDATA.#$DAY_OF_WEEK + #i1
		TIMEDATA.#$DAY_NAME = "#$<&ENGINEX.TIME.DAY_NAMES.#$<&TIMEDATA.#$DAY_OF_WEEK&>&>"


		/*** get current hour/minute/second **/

		DEFINE INT __DAY_SECONDS 0
		DEFINE INT __HOUR_SECONDS 0

		__DAY_SECONDS = __SECONDS_SINCE_YEAR_STARTED % ENGINEX.TIME.SECONDS_PER_DAY
		TIMEDATA.#$HOUR = __DAY_SECONDS / ENGINEX.TIME.SECONDS_PER_HOUR
		__HOUR_SECONDS = __DAY_SECONDS % ENGINEX.TIME.SECONDS_PER_HOUR
		TIMEDATA.#$MINUTE = __HOUR_SECONDS / ENGINEX.TIME.SECONDS_PER_MINUTE
		TIMEDATA.#$SECOND = __HOUR_SECONDS % ENGINEX.TIME.SECONDS_PER_MINUTE

		DELETE __DAY_SECONDS
		DELETE __HOUR_SECONDS


		/*** get is-leap/noleap year **/

		TIMEDATA.#$YEAR = TIMEDATA.#$YEAR + #i1
		ENGINEX.TIME.IS_LEAP_YEAR TIMEDATA.#$IS_LEAP_YEAR 1 TIMEDATA.#$YEAR


		/*** get month/day **/

		TIMEDATA.#$DAY = TIMEDATA.#$DAY_OF_YEAR

		WHILE (TRUE == TRUE)

			TIMEDATA.#$MONTH = TIMEDATA.#$MONTH + #i1
			SWITCH TIMEDATA.#$MONTH

				CASE #i1
					TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i31
					BREAK 1
				CASE #i2
					IF (TIMEDATA.#$IS_LEAP_YEAR == TRUE)
						TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i29
					ELSE
						TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i28
					ENDIF
					BREAK 1
				CASE #i3
					TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i31
					BREAK 1
				CASE #i4
					TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i30
					BREAK 1
				CASE #i5
					TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i31
					BREAK 1
				CASE #i6
					TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i30
					BREAK 1
				CASE #i7
					TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i31
					BREAK 1
				CASE #i8
					TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i31
					BREAK 1
				CASE #i9
					TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i30
					BREAK 1
				CASE #i10
					TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i31
					BREAK 1
				CASE #i11
					TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i30
					BREAK 1
				CASE #i12
					TIMEDATA.#$DAY = TIMEDATA.#$DAY - #i31
					BREAK 1

			ENDSWITCH
			IF (TIMEDATA.#$DAY <= ZERO)
				BREAK 2
			ENDIF
		WEND

		TIMEDATA.#$MONTH_NAME = "#$<&ENGINEX.TIME.MONTH_NAMES.#$<&TIMEDATA.#$MONTH&>&>"

		SWITCH TIMEDATA.#$MONTH

			CASE #i1
				TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i31
				BREAK 1
			CASE #i2
				IF (TIMEDATA.#$IS_LEAP_YEAR == TRUE)
					TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i29
				ELSE
					TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i28
				ENDIF
				BREAK 1
			CASE #i3
				TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i31
				BREAK 1
			CASE #i4
				TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i30
				BREAK 1
			CASE #i5
				TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i31
				BREAK 1
			CASE #i6
				TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i30
				BREAK 1
			CASE #i7
				TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i31
				BREAK 1
			CASE #i8
				TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i31
				BREAK 1
			CASE #i9
				TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i30
				BREAK 1
			CASE #i10
				TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i31
				BREAK 1
			CASE #i11
				TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i30
				BREAK 1
			CASE #i12
				TIMEDATA.#$DAY = TIMEDATA.#$DAY + #i31
				BREAK 1

		ENDSWITCH


		/*** get formated values **/

		IF (TIMEDATA.#$DAY < #i10)
			TIMEDATA.#$DAY_FORMATED = "#$0<&TIMEDATA.#$DAY&>"
		ELSE
			TIMEDATA.#$DAY_FORMATED = "#$<&TIMEDATA.#$DAY&>"
		ENDIF

		IF (TIMEDATA.#$MONTH < #i10)
			TIMEDATA.#$MONTH_FORMATED = "#$0<&TIMEDATA.#$MONTH&>"
		ELSE
			TIMEDATA.#$MONTH_FORMATED = "#$<&TIMEDATA.#$MONTH&>"
		ENDIF

		IF (TIMEDATA.#$HOUR < #i10)
			TIMEDATA.#$HOUR_FORMATED = "#$0<&TIMEDATA.#$HOUR&>"
		ELSE
			TIMEDATA.#$HOUR_FORMATED = "#$<&TIMEDATA.#$HOUR&>"
		ENDIF

		IF (TIMEDATA.#$MINUTE < #i10)
			TIMEDATA.#$MINUTE_FORMATED = "#$0<&TIMEDATA.#$MINUTE&>"
		ELSE
			TIMEDATA.#$MINUTE_FORMATED = "#$<&TIMEDATA.#$MINUTE&>"
		ENDIF

		IF (TIMEDATA.#$SECOND < #i10)
			TIMEDATA.#$SECOND_FORMATED = "#$0<&TIMEDATA.#$SECOND&>"
		ELSE
			TIMEDATA.#$SECOND_FORMATED = "#$<&TIMEDATA.#$SECOND&>"
		ENDIF


		/*** get time change **/

		DEFINE INT __DAYS_TILL_MARCH_END 0
		DEFINE INT __WEEKS_TILL_MARCH_END 0
		DEFINE INT __SECONDS_TILL_LAST_SUNDAY_OF_MARCH 0
		DEFINE INT __SECONDS_TILL_LAST_SUNDAY_OF_MARCH_ADD 0
		DEFINE INT __DAYS_TILL_OCTOBER_END 0
		DEFINE INT __WEEKS_TILL_OCTOBER_END 0
		DEFINE INT __SECONDS_TILL_LAST_SUNDAY_OF_OCTOBER 0
		DEFINE INT __SECONDS_TILL_LAST_SUNDAY_OF_OCTOBER_ADD 0


		__DAYS_TILL_MARCH_END = __DAYS_TILL_MARCH_END + #i31
		__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + #i31

		IF (TIMEDATA.#$IS_LEAP_YEAR == FALSE)
			__DAYS_TILL_MARCH_END = __DAYS_TILL_MARCH_END + #i28
			__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + #i28
		ELSE
			__DAYS_TILL_MARCH_END = __DAYS_TILL_MARCH_END + #i29
			__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + #i29
		ENDIF

		__DAYS_TILL_MARCH_END = __DAYS_TILL_MARCH_END + #i31
		__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + #i31

		__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + #i30
		__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + #i31
		__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + #i30
		__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + #i31
		__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + #i31
		__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + #i30
		__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + #i31


		IF (__FIST_DAY_OF_FIRST_WEEK > #i3)
			__DAYS_TILL_MARCH_END = __DAYS_TILL_MARCH_END - #i7
			__DAYS_TILL_MARCH_END = __DAYS_TILL_MARCH_END + __FIST_DAY_OF_FIRST_WEEK
			__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END - #i7
			__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + __FIST_DAY_OF_FIRST_WEEK
		ELSE
			__DAYS_TILL_MARCH_END = __DAYS_TILL_MARCH_END + __FIST_DAY_OF_FIRST_WEEK
			__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + __FIST_DAY_OF_FIRST_WEEK
		ENDIF

		__WEEKS_TILL_MARCH_END = __DAYS_TILL_MARCH_END / #i7
		__DAYS_TILL_MARCH_END = __WEEKS_TILL_MARCH_END * #i7
		__WEEKS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END / #i7
		__DAYS_TILL_OCTOBER_END = __WEEKS_TILL_OCTOBER_END * #i7

		IF (__FIST_DAY_OF_FIRST_WEEK > #i3)
			__DAYS_TILL_MARCH_END = __DAYS_TILL_MARCH_END + #i7
			__DAYS_TILL_MARCH_END = __DAYS_TILL_MARCH_END - __FIST_DAY_OF_FIRST_WEEK
			__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END + #i7
			__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END - __FIST_DAY_OF_FIRST_WEEK
		ELSE
			__DAYS_TILL_MARCH_END = __DAYS_TILL_MARCH_END - __FIST_DAY_OF_FIRST_WEEK
			__DAYS_TILL_OCTOBER_END = __DAYS_TILL_OCTOBER_END - __FIST_DAY_OF_FIRST_WEEK
		ENDIF


		__SECONDS_TILL_LAST_SUNDAY_OF_MARCH = __DAYS_TILL_MARCH_END * ENGINEX.TIME.SECONDS_PER_DAY
		__SECONDS_TILL_LAST_SUNDAY_OF_MARCH_ADD = #i22 * ENGINEX.TIME.SECONDS_PER_HOUR
		__SECONDS_TILL_LAST_SUNDAY_OF_MARCH = __SECONDS_TILL_LAST_SUNDAY_OF_MARCH - __SECONDS_TILL_LAST_SUNDAY_OF_MARCH_ADD

		__SECONDS_TILL_LAST_SUNDAY_OF_OCTOBER = __DAYS_TILL_OCTOBER_END * ENGINEX.TIME.SECONDS_PER_DAY
		__SECONDS_TILL_LAST_SUNDAY_OF_OCTOBER_ADD = #i21 * ENGINEX.TIME.SECONDS_PER_HOUR
		__SECONDS_TILL_LAST_SUNDAY_OF_OCTOBER = __SECONDS_TILL_LAST_SUNDAY_OF_OCTOBER - __SECONDS_TILL_LAST_SUNDAY_OF_OCTOBER_ADD


		TIMEDATA.#$IS_SUMMERTIME = FALSE
		IF (__SECONDS_SINCE_YEAR_STARTED >= __SECONDS_TILL_LAST_SUNDAY_OF_MARCH)
			IF (__SECONDS_SINCE_YEAR_STARTED <= __SECONDS_TILL_LAST_SUNDAY_OF_OCTOBER)
				TIMEDATA.#$IS_SUMMERTIME = TRUE
			ENDIF
		ENDIF


		DELETE __DAYS_TILL_MARCH_END
		DELETE __WEEKS_TILL_MARCH_END
		DELETE __SECONDS_TILL_LAST_SUNDAY_OF_MARCH
		DELETE __SECONDS_TILL_LAST_SUNDAY_OF_MARCH_ADD
		DELETE __SECONDS_TILL_LAST_SUNDAY_OF_OCTOBER
		DELETE __SECONDS_TILL_LAST_SUNDAY_OF_OCTOBER_ADD
		DELETE __FIST_DAY_OF_FIRST_WEEK
		DELETE __SECONDS_SINCE_YEAR_STARTED

	RETURN TIMEDATA

//-------------------------------------------------------------------------------------

	PUBLIC TIMESTAMP_TICKS 1 TIMESTAMP

		DEFINE INT TICKS 0
		TICKS = TIMESTAMP + ENGINEX.TIME.SECONDS_UNTILL_TIMESTAMP
		TICKS = TICKS * TICKS_PER_S

	RETURN TICKS

//-------------------------------------------------------------------------------------

	PUBLIC MAKE_TIMESTAMP 6 HOUR MINUTE SECOND MONTH DAY YEAR

		DEFINE INT TIMESTAMP 0
		DEFINE INT TIMESTAMP_ADD 0


		/* hour */

		TIMESTAMP_ADD = HOUR * ENGINEX.TIME.SECONDS_PER_HOUR
		TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD


		/* minute */

		TIMESTAMP_ADD = MINUTE * ENGINEX.TIME.SECONDS_PER_MINUTE
		TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD


		/* second */

		TIMESTAMP = TIMESTAMP + SECOND


		/* year */

		DEFINE INT __PERIOD4_REST 0
		DEFINE INT __PERIOD100_REST 0
		DEFINE INT __PERIOD400_REST 0
		DEFINE INT __IS_LEAP_YEAR 0
		DEFINE INT __PERIOD4_COUNT 0
		DEFINE INT __PERIOD400_COUNT 0
		DEFINE INT __PERIOD100_COUNT 0
		DEFINE INT __YEAR_ZERO_BASED 0
		DEFINE INT __PERIOD400_SECONDS 0
		DEFINE INT __PERIOD100_SECONDS 0
		DEFINE INT __PERIOD4_SECONDS 0
		DEFINE INT __SECONDS_UNTILL_YEAR_STARTED 0
		DEFINE INT __SECONDS_UNTILL_YEAR_STARTED_ADD 0


		ENGINEX.TIME.IS_LEAP_YEAR __IS_LEAP_YEAR 1 YEAR

		DEFINE INT dsfsdf 0
		dsfsdf = YEAR - #i1

		__PERIOD400_COUNT = dsfsdf / #i400
		__PERIOD400_REST = dsfsdf % #i400

		__PERIOD100_COUNT = __PERIOD400_REST / #i100
		__PERIOD100_REST = __PERIOD400_REST % #i100

		__PERIOD4_COUNT = __PERIOD100_REST / #i4
		__PERIOD4_REST = __PERIOD100_REST % #i4


		__PERIOD4_SECONDS = #i4 * ENGINEX.TIME.SECONDS_PER_YEAR_NOLEAP
		__PERIOD4_SECONDS = __PERIOD4_SECONDS + ENGINEX.TIME.SECONDS_PER_DAY

		__PERIOD100_SECONDS = __PERIOD4_SECONDS * #i25
		__PERIOD100_SECONDS = __PERIOD100_SECONDS - ENGINEX.TIME.SECONDS_PER_DAY

		__PERIOD400_SECONDS = __PERIOD100_SECONDS * #i4
		__PERIOD400_SECONDS = __PERIOD400_SECONDS + ENGINEX.TIME.SECONDS_PER_DAY


		__SECONDS_UNTILL_YEAR_STARTED_ADD = __PERIOD400_COUNT * __PERIOD400_SECONDS
		__SECONDS_UNTILL_YEAR_STARTED = __SECONDS_UNTILL_YEAR_STARTED + __SECONDS_UNTILL_YEAR_STARTED_ADD

		__SECONDS_UNTILL_YEAR_STARTED_ADD = __PERIOD100_COUNT * __PERIOD100_SECONDS
		__SECONDS_UNTILL_YEAR_STARTED = __SECONDS_UNTILL_YEAR_STARTED + __SECONDS_UNTILL_YEAR_STARTED_ADD

		__SECONDS_UNTILL_YEAR_STARTED_ADD = __PERIOD4_COUNT * __PERIOD4_SECONDS
		__SECONDS_UNTILL_YEAR_STARTED = __SECONDS_UNTILL_YEAR_STARTED + __SECONDS_UNTILL_YEAR_STARTED_ADD

		__SECONDS_UNTILL_YEAR_STARTED_ADD = __PERIOD4_REST * ENGINEX.TIME.SECONDS_PER_YEAR_NOLEAP
		__SECONDS_UNTILL_YEAR_STARTED = __SECONDS_UNTILL_YEAR_STARTED + __SECONDS_UNTILL_YEAR_STARTED_ADD


		TIMESTAMP = TIMESTAMP + __SECONDS_UNTILL_YEAR_STARTED


		DELETE __PERIOD4_REST
		DELETE __PERIOD100_REST
		DELETE __PERIOD400_REST
		DELETE __PERIOD4_COUNT
		DELETE __PERIOD400_COUNT
		DELETE __PERIOD100_COUNT
		DELETE __PERIOD400_SECONDS
		DELETE __PERIOD100_SECONDS
		DELETE __PERIOD4_SECONDS
		DELETE __SECONDS_UNTILL_YEAR_STARTED
		DELETE __SECONDS_UNTILL_YEAR_STARTED_ADD


		/* month */

		FOR __MONTH_I 1 13 1
			IF (__MONTH_I < MONTH)

				SWITCH __MONTH_I

					CASE #i1
						TIMESTAMP_ADD = #i31 * ENGINEX.TIME.SECONDS_PER_DAY
						TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
						BREAK 1
					CASE #i2
						IF (__IS_LEAP_YEAR == TRUE)
							TIMESTAMP_ADD = #i29 * ENGINEX.TIME.SECONDS_PER_DAY
						ELSE
							TIMESTAMP_ADD = #i28 * ENGINEX.TIME.SECONDS_PER_DAY
						ENDIF
						TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
						BREAK 1
					CASE #i3
						TIMESTAMP_ADD = #i31 * ENGINEX.TIME.SECONDS_PER_DAY
						TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
						BREAK 1
					CASE #i4
						TIMESTAMP_ADD = #i30 * ENGINEX.TIME.SECONDS_PER_DAY
						TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
						BREAK 1
					CASE #i5
						TIMESTAMP_ADD = #i31 * ENGINEX.TIME.SECONDS_PER_DAY
						TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
						BREAK 1
					CASE #i6
						TIMESTAMP_ADD = #i30 * ENGINEX.TIME.SECONDS_PER_DAY
						TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
						BREAK 1
					CASE #i7
						TIMESTAMP_ADD = #i31 * ENGINEX.TIME.SECONDS_PER_DAY
						TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
						BREAK 1
					CASE #i8
						TIMESTAMP_ADD = #i31 * ENGINEX.TIME.SECONDS_PER_DAY
						TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
						BREAK 1
					CASE #i9
						TIMESTAMP_ADD = #i30 * ENGINEX.TIME.SECONDS_PER_DAY
						TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
						BREAK 1
					CASE #i10
						TIMESTAMP_ADD = #i31 * ENGINEX.TIME.SECONDS_PER_DAY
						TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
						BREAK 1
					CASE #i11
						TIMESTAMP_ADD = #i30 * ENGINEX.TIME.SECONDS_PER_DAY
						TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
						BREAK 1
					CASE #i12
						TIMESTAMP_ADD = #i31 * ENGINEX.TIME.SECONDS_PER_DAY
						TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
						BREAK 1

				ENDSWITCH

			ENDIF
		NEXT

		DELETE __IS_LEAP_YEAR


		/* day */

		DEFINE INT DAY_ZERO_BASED 0
		DAY_ZERO_BASED = DAY - #i1
		TIMESTAMP_ADD = DAY_ZERO_BASED * ENGINEX.TIME.SECONDS_PER_DAY
		TIMESTAMP = TIMESTAMP + TIMESTAMP_ADD
		DELETE DAY_ZERO_BASED

		/* delete seconds untill 1970 */

		TIMESTAMP = TIMESTAMP - ENGINEX.TIME.SECONDS_UNTILL_TIMESTAMP


		DELETE TIMESTAMP_ADD
	RETURN TIMESTAMP

//-------------------------------------------------------------------------------------

	PUBLIC IS_LEAP_YEAR 1 YEAR
		DEFINE INT IS_LEAP_YEAR 0
		DEFINE INT __PERIOD4_REST 0
		DEFINE INT __PERIOD100_REST 0
		DEFINE INT __PERIOD400_REST 0
		DEFINE INT __PERIOD4_COUNT 0
		DEFINE INT __PERIOD400_COUNT 0
		DEFINE INT __PERIOD100_COUNT 0
		__PERIOD4_COUNT = YEAR / #i4
		__PERIOD4_REST = YEAR % #i4
		IF (__PERIOD4_REST == ZERO)
			__PERIOD100_COUNT = YEAR / #i100
			__PERIOD100_REST = YEAR % #i100
			IF (__PERIOD100_REST == ZERO)
				__PERIOD400_REST = YEAR % #i400
				IF (__PERIOD400_REST == ZERO)
					IS_LEAP_YEAR = TRUE
				ELSE
					IS_LEAP_YEAR = FALSE
				ENDIF
			ELSE
				IS_LEAP_YEAR = TRUE
			ENDIF
		ELSE
			IS_LEAP_YEAR = FALSE
		ENDIF
	RETURN IS_LEAP_YEAR

//-------------------------------------------------------------------------------------

END_CLASS

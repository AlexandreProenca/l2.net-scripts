//======================================================================
//
// L2Vision v0.60
// by zdev, Stan12
//
// Code to report back to L2Vision server component. Note that by
// default even without using this script, the HP/CP/MP values will
// be reported by L2.Net to L2Vision server.
//
// By using this script, you can send more information to L2Vision
// server.
//
// [REQUIRED]
//
//   L2Vision now requires DLIB scripts to be installed
//   See http://insane-gamers.com/showthread.php/1214-DLIB-v3.4
//
//   To use any of the optional components below, you must initialize
//   L2Vision.l2s with the following script snippet:
//
//     INCLUDE stdlib/Inventory.l2c
//     INCLUDE stdlib/Player.l2c
//     INCLUDE DLIB/Packets/Classes/Attack.l2c
//     INCLUDE DLIB/Packets/Classes/MultiAttack.l2c
//     INCLUDE DLIB/Packets/Classes/systemMessage.l2c
//
//     CALL_EXTERN L2Vision.l2s L2V_init VOID 1 "#$aaa.bbb.ccc.ddd"
//
//   For the "#$aaa.bbb.ccc.ddd" please provide the IP address where
//   the L2Vision server component is running. If it's running on the
//   same box as L2.Net, then you would provide: "#$127.0.0.1"
//
//
// [OPTIONAL: HILITE ITEMS IN LOOT LIST]
//
//   Add to somewhere in your script (must be sent after L2Vision is up):
//
//     CALL_EXTERN L2Vision.l2s L2V_send_hilite_item VOID 2 "#$Adena" <setting>
//
//     where <setting> = #i0 (off) #i1 (on)
//     Adena is an example, replace with another name but remember #$ in front
//     call as many times as you want.
//     This will make the item show up in white in the list.
//
// [OPTIONAL: MARK ITEMS AS CONSUMABLE]
//
//   Add to somewhere in your script (must be sent after L2Vision is up):
//
//     CALL_EXTERN L2V_send_consumable_item 2 "#$Soulshot: S-Grade" <setting>
//
//     where <setting> = #i0 (off) #i1 (on)
//     Soulshot is an example, replace with another name but remember #$ in front
//     call as many times as you want
//     This will show the item in the list no matter what and also show
//     consumption rate next to it.
//
//     CALL_EXTERN L2V_send_consumable_item_id 2 1061 <setting>
//
//     1061 is the id of the "Healing Potion", which is not an unique item name,
//     so it's not correctly found if referred by name in previous function.
//     Replace with another id for other items.
//
// [OPTIONAL: HILITE MOBS IN MOBS LIST]
//
//   Add to somewhere in your script (must be sent after L2Vision is up):
//
//     CALL_EXTERN L2Vision.l2s L2V_send_hilite_mob VOID 2 "#$Elpy" <setting>
//
//     where <setting> = #i0 (off) #i1 (on)
//     Elpy is an example, replace with another name but remember #$ in front
//     call as many times as you want
//     This will make the mob show up in white in the list.
//
// [OPTIONAL: ADD DAMAGE SKILL ID]
//
//   Add to somewhere in your script (must be sent after L2Vision is up):
//
//     CALL_EXTERN L2Vision.l2s L2V_add_damage_skill VOID 1 "#$Stun Shot"
//
//     Stun Shot is an example, replace with another name but remember #$ in front
//     call as many times as you want
//     This will make the skill show up in damage statistics
//
// [OPTIONAL: ADD DAMAGE LIMITS]
//
//   Add to somewhere in your script (must be sent after L2Vision is up):
//
//     CALL_EXTERN L2Vision.l2s L2V_set_damage_limit VOID 2 <min> <max>
//
//     Damage statistics show all damage that the character gives to mobs.
//     Default values 0 and 1000000.
//
//     However, it may be necessary to not count damage done by reflect buffs/items.
//     Then set <min> number to something higher than your reflect damage but lower than
//     hit damage.
//
//     Also sometimes the normal damage to mobs is extraordinary high, for example
//     average damage could be 1k but few hits of over 100k could appear from time time.
//     Such hits skew the average statistics quite significantly: 99 hits of 1000 damage
//     followed by a single 100000 hits = 2000 average damage.
//     If you require to NOT count such hits, set <max> to something reasonable.
//
//======================================================================

//----------------------------------------------------------------------

FUNCTION L2V_send_char_info VOID
  DEFINE BYTEBUFFER pkt 256

  pkt.RESET_INDEX
  pkt.WRITE_UINT32 #i98765
  pkt.WRITE_UINT32 #i1
  pkt.WRITE_UINT64 CHAR_XP
  pkt.WRITE_UINT64 CHAR_SP
  pkt.WRITE_UINT32 CHAR_MAX_CP
  pkt.WRITE_UINT32 CHAR_CUR_CP
  pkt.WRITE_UINT32 CHAR_MAX_HP
  pkt.WRITE_UINT32 CHAR_CUR_HP
  pkt.WRITE_UINT32 CHAR_MAX_MP
  pkt.WRITE_UINT32 CHAR_CUR_MP
  pkt.WRITE_INT32 CHAR_X
  pkt.WRITE_INT32 CHAR_Y
  pkt.WRITE_INT32 CHAR_Z
  pkt.TRIM_TO_INDEX
  pkt.RESET_INDEX

  UDP_SENDBB pkt
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_send_inventory_updated_item 2 item_id count
  DEFINE BYTEBUFFER pkt 256
  DEFINE STRING name 0

  ITEM_GET_NAME name "<&item_id&>"
  IF name == "#$-unknown item-"
    DEFINE STRING name2 "<&name&> (id=<&item_id&>)"
  ELSE
    DEFINE STRING name2 "<&name&>"
  ENDIF

  pkt.RESET_INDEX
  pkt.WRITE_UINT32 #i98765
  pkt.WRITE_UINT32 #i2
  pkt.WRITE_UINT64 item_id
  pkt.WRITE_UINT64 count
  pkt.WRITE_STRING name2
  pkt.TRIM_TO_INDEX
  pkt.RESET_INDEX

  UDP_SENDBB pkt 
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_send_killed_mob 1 mob_id
  DEFINE BYTEBUFFER pkt 256
  DEFINE STRING name 0

  IF mob_id > 1000000
    mob_id = mob_id - 1000000
  ENDIF

  NPC_GET_NAME name "<&mob_id&>"
  IF name == "#$-unknown npc-"
    DEFINE STRING name2 "<&name&> (id=<&mob_id&>)"
  ELSE
    DEFINE STRING name2 "<&name&>"
  ENDIF

  pkt.RESET_INDEX
  pkt.WRITE_UINT32 #i98765
  pkt.WRITE_UINT32 #i3
  pkt.WRITE_UINT64 mob_id
  pkt.WRITE_STRING name2
  pkt.TRIM_TO_INDEX
  pkt.RESET_INDEX

  UDP_SENDBB pkt
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_send_hilite_item 2 name hilite
  DEFINE BYTEBUFFER pkt 256
  DEFINE INT item_id 0

  ITEM_GET_ID item_id "<&name&>"
  pkt.RESET_INDEX
  pkt.WRITE_UINT32 #i98765
  pkt.WRITE_UINT32 #i4
  pkt.WRITE_UINT64 item_id
  pkt.WRITE_UINT32 hilite
  pkt.WRITE_STRING name
  pkt.TRIM_TO_INDEX
  pkt.RESET_INDEX

  UDP_SENDBB pkt
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_send_hilite_mob 2 name hilite
  DEFINE BYTEBUFFER pkt 256
  DEFINE INT mob_id 0

  NPC_GET_ID mob_id "<&name&>"
  pkt.RESET_INDEX
  pkt.WRITE_UINT32 #i98765
  pkt.WRITE_UINT32 #i5
  pkt.WRITE_UINT64 mob_id
  pkt.WRITE_UINT32 hilite
  pkt.WRITE_STRING name
  pkt.TRIM_TO_INDEX
  pkt.RESET_INDEX

  UDP_SENDBB pkt
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_send_consumable_item 2 name consumable
  DEFINE BYTEBUFFER pkt 256
  DEFINE INT item_id 0

  pkt.RESET_INDEX
  pkt.WRITE_UINT32 #i98765
  pkt.WRITE_UINT32 #i6
  pkt.WRITE_UINT64 item_id
  pkt.WRITE_UINT32 consumable
  pkt.WRITE_STRING name
  pkt.TRIM_TO_INDEX
  pkt.RESET_INDEX

  UDP_SENDBB pkt
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_send_consumable_item_id 2 item_id consumable
  DEFINE BYTEBUFFER pkt 256
  DEFINE STRING name 0

  ITEM_GET_NAME name "<&item_id&>"
  pkt.RESET_INDEX
  pkt.WRITE_UINT32 #i98765
  pkt.WRITE_UINT32 #i6
  pkt.WRITE_UINT64 item_id
  pkt.WRITE_UINT32 consumable
  pkt.WRITE_STRING name
  pkt.TRIM_TO_INDEX
  pkt.RESET_INDEX

  UDP_SENDBB pkt
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_send_inventory_added_item 2 item_id count
  DEFINE BYTEBUFFER pkt 256
  DEFINE STRING name    ""

  ITEM_GET_NAME name "<&item_id&>"
  IF name == "#$-unknown item-"
    DEFINE STRING name2 "<&name&> (id=<&item_id&>)"
  ELSE
    DEFINE STRING name2 "<&name&>"
  ENDIF

  pkt.RESET_INDEX
  pkt.WRITE_UINT32 #i98765
  pkt.WRITE_UINT32 #i7
  pkt.WRITE_UINT64 item_id
  pkt.WRITE_UINT64 count
  pkt.WRITE_STRING name2
  pkt.TRIM_TO_INDEX
  pkt.RESET_INDEX

  UDP_SENDBB pkt
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_send_inventory_removed_item 2 item_id count
  DEFINE BYTEBUFFER pkt 256
  DEFINE STRING name    ""

  ITEM_GET_NAME name "<&item_id&>"
  IF name == "#$-unknown item-"
    DEFINE STRING name2 "<&name&> (id=<&item_id&>)"
  ELSE
    DEFINE STRING name2 "<&name&>"
  ENDIF

  pkt.RESET_INDEX
  pkt.WRITE_UINT32 #i98765
  pkt.WRITE_UINT32 #i8
  pkt.WRITE_UINT64 item_id
  pkt.WRITE_UINT64 count
  pkt.WRITE_STRING name2
  pkt.TRIM_TO_INDEX
  pkt.RESET_INDEX

  UDP_SENDBB pkt
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_send_chat 3 type sender_name message
  DEFINE BYTEBUFFER pkt 256

  pkt.RESET_INDEX
  pkt.WRITE_UINT32 #i98765
  pkt.WRITE_UINT32 #i9
  pkt.WRITE_UINT32 type
  pkt.WRITE_STRING sender_name
  pkt.WRITE_STRING message
  pkt.TRIM_TO_INDEX
  pkt.RESET_INDEX

  UDP_SENDBB pkt
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_send_visitor 1 name
  DEFINE BYTEBUFFER pkt 256

  pkt.RESET_INDEX
  pkt.WRITE_UINT32 #i98765
  pkt.WRITE_UINT32 #i10
  pkt.WRITE_STRING name
  pkt.TRIM_TO_INDEX
  pkt.RESET_INDEX

  UDP_SENDBB pkt
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_send_visitor_info
  DEFINE ARRAYLIST players 0

  GET_PLAYERS players

  FOREACH p Player players
    L2V_send_visitor VOID 1 players.p.NAME
    SLEEP 10
  NEXTEACH
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_send_full_inventory VOID
  DEFINE ARRAYLIST inv  0

  GET_INVENTORY inv
  FOREACH ii Inventory inv
    L2V_send_inventory_updated_item VOID 2 inv.ii.ITEM_ID inv.ii.COUNT
    SLEEP 10
  NEXTEACH
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_inventory_packet_handler VOID
  DEFINE INT pkt_type    0
  DEFINE INT count       0
  DEFINE INT i           0
  DEFINE INT update_type 0
  DEFINE INT item_type   0
  DEFINE INT obj_id      0
  DEFINE INT item_id     0
  DEFINE INT ignore      0
  DEFINE INT quantity    0
  DEFINE INT item_type_2 0

  PACKET.RESET_INDEX
  PACKET.READ_BYTE pkt_type
  PACKET.READ_UINT16 count
  DO
    PACKET.READ_UINT16 update_type
    //PACKET.READ_UINT16 item_type
    PACKET.READ_UINT32 obj_id
    PACKET.READ_UINT32 item_id
    PACKET.READ_UINT32 ignore
    PACKET.READ_UINT64 quantity
    PACKET.READ_UINT16 item_type_2
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT32 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT32 ignore
    PACKET.READ_UINT32 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT32 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT16 ignore
    PACKET.READ_UINT16 ignore

    // ADDS
    IF update_type == 1
      L2V_send_inventory_added_item VOID 2 item_id quantity
    ENDIF

    // UPDATES
    IF update_type == 2
      L2V_send_inventory_updated_item VOID 2 item_id quantity
    ENDIF

    // REMOVES
    IF update_type == 3
      L2V_send_inventory_removed_item VOID 2 item_id quantity
    ENDIF

    i = i + 1
  LOOP i < count
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_mob_death_handler VOID
  L2V_send_killed_mob VOID 1 TARGET_TYPEID
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_chat_handler VOID
  L2V_send_chat VOID 3 MESSAGETYPE SENDERNAME MESSAGE
RETURN VOID

//----------------------------------------------------------------------

function L2V_attack_packet_handler 0
  define sortedlist attackSL 0
  call_extern "DLIB\Packets\ReadAttack.l2s" DLIB::Packets::ReadAttack attackSL 1 PACKET

  define int type 1
  define int damage "<&attackSL.#$defender_damage&>"
  if damage > L2V_max_damage
    return void
  endif

  define int skill 0
  define string skill_name "Normal attack"

  define int flags 0
  flags = #i128 & "attackSL.#$attacker_flags"
  if flags == 128
    type = 0
  endif

  define string source 0
  char_get_name source "<&attackSL.#$attacker_id&>"
  if source != CHAR_NAME
    return void
  endif

  flags = #i32 & "attackSL.#$attacker_flags"
  if flags == 32
    type = 2
  endif
    
  DEFINE BYTEBUFFER pkt 256

  pkt.RESET_INDEX
  pkt.WRITE_UINT32 #i98765
  pkt.WRITE_UINT32 #i11
  pkt.WRITE_UINT32 damage
  pkt.WRITE_UINT32 type
  pkt.WRITE_UINT32 skill
  pkt.WRITE_STRING skill_name
  pkt.TRIM_TO_INDEX
  pkt.RESET_INDEX

  UDP_SENDBB pkt

return void

//----------------------------------------------------------------------

FUNCTION L2V_add_damage_skill 1 name
  DEFINE INT temp 0
  SKILL_GET_ID temp "<&name&>"
  L2V_skill_ids.add "<&temp&>" "<&temp&>"
RETURN VOID

//----------------------------------------------------------------------

FUNCTION L2V_set_damage_limit 2 min max
  L2V_min_damage = min
  L2V_max_damage = max
RETURN VOID

//----------------------------------------------------------------------

function L2V_sysmsg_packet_handler 0
  define sortedlist msgSL 0
  call_extern "DLIB\Packets\ReadSystemMessage.l2s" DLIB::Packets::ReadSystemMessage msgSL 1 PACKET

  lock L2V_skill_mutex
  if "<&msgSL.#$message_id&>" == 46
    define int skill_id2 "<&msgSL.#$data.0.int_buffer0&>"
    if "L2V_skill_ids.contains_key <&skill_id2&>" == true
      L2V_skill_id = skill_id2
      skill_get_name L2V_skill_name "<&msgSL.#$data.0.int_buffer0&>" "<&msgSL.#$data.0.int_buffer1&>"
    endif
  endif

  if "<&msgSL.#$message_id&>" == 2266
    if L2V_skill_id != 0
      L2V_skill_crit = 1
    endif
  endif

  if "<&msgSL.#$message_id&>" == 2261
    if L2V_skill_id != 0
      define int type 1
      if L2V_skill_crit == 1
         type = 2
      endif

      define int damage "<&msgSL.#$data.2.int_buffer0&>"
      if (damage < L2V_min_damage) || (damage > L2V_max_damage)
        unlock L2V_skill_mutex
        return void
      endif

      DEFINE BYTEBUFFER pkt 256

      pkt.RESET_INDEX
      pkt.WRITE_UINT32 #i98765
      pkt.WRITE_UINT32 #i11
      pkt.WRITE_UINT32 damage
      pkt.WRITE_UINT32 type
      pkt.WRITE_UINT32 L2V_skill_id
      pkt.WRITE_STRING L2V_skill_name
      pkt.TRIM_TO_INDEX
      pkt.RESET_INDEX

      UDP_SENDBB pkt
    endif

    L2V_skill_id = 0
    L2V_skill_crit = 0
  endif

  unlock L2V_skill_mutex
return void

//----------------------------------------------------------------------

FUNCTION L2V_reporter_thread VOID
  DO
    L2V_send_char_info
    L2V_send_visitor_info
    SLEEP 10000
  LOOP ZERO == ZERO
RETURN VOID

//----------------------------------------------------------------------
// Listener Initialization

FUNCTION L2V_init 1 listener_ip
  include Stdlib/Inventory.l2c
  include Stdlib/Player.l2c
  include DLIB/Modules/Classes/DlibModule.l2c
  include DLIB/Packets/Classes/Attack.l2c
  include DLIB/Packets/Classes/MultiAttack.l2c
  include DLIB/Packets/Classes/systemMessage.l2c

  DEFINE_GLOBAL STRING _listener_ip ""
  _listener_ip = listener_ip

  L2V_send_char_info
  L2V_send_full_inventory

  THREAD L2V_reporter_thread

  SET_EVENT "<&SCRIPTEVENT_SERVERPACKET&>" "<&SYSTEM_CURRENTFILE&>" L2V_inventory_packet_handler 33
  SET_EVENT "<&SCRIPTEVENT_CHAT&>" "<&SYSTEM_CURRENTFILE&>" L2V_chat_handler
  SET_EVENT "<&SCRIPTEVENT_TARGETDIE&>" "<&SYSTEM_CURRENTFILE&>" L2V_mob_death_handler
  set_event "<&SCRIPTEVENT_SERVERPACKET&>" "<&SYSTEM_CURRENTFILE&>" L2V_attack_packet_handler 51

  define_global sortedlist L2V_skill_ids 0
  define_global int L2V_skill_id 0
  define_global string L2V_skill_name 0
  define_global int L2V_skill_crit 0
  define_global string L2V_skill_mutex "LOCK"
  define_global int L2V_min_damage 0
  define_global int L2V_max_damage 1000000
  set_event "<&SCRIPTEVENT_SERVERPACKET&>" "<&SYSTEM_CURRENTFILE&>" L2V_sysmsg_packet_handler 98
RETURN VOID
